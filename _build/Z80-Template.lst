                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.3 #9775 (Mac OS X i386)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _system_init
                             13 	.globl _isr_vector38
                             14 	.globl _isr_vector66
                             15 	.globl _isprint
                             16 	.globl _io_write
                             17 	.globl _io_read
                             18 	.globl _io_write_buffer
                             19 	.globl _io_read_buffer
                             20 	.globl _uart_init
                             21 	.globl _uart_set_baudrate
                             22 	.globl _uart_write
                             23 	.globl _uart_read
                             24 	.globl _uart_print
                             25 	.globl _uart_read_line
                             26 	.globl _uart_disable_interrupts
                             27 	.globl _uart_enable_interrupts
                             28 	.globl _ppi_init
                             29 	.globl _ppi_set_portc_bit
                             30 	.globl _ppi_clear_portc_bit
                             31 	.globl _delay_10us
                             32 	.globl _delay_100us
                             33 	.globl _delay_ms
                             34 	.globl _putchar
                             35 	.globl _getchar
                             36 ;--------------------------------------------------------
                             37 ; special function registers
                             38 ;--------------------------------------------------------
                     0000    39 _PPI_PORTA	=	0x0000
                     0001    40 _PPI_PORTB	=	0x0001
                     0002    41 _PPI_PORTC	=	0x0002
                     0003    42 _PPI_CTRL	=	0x0003
                     0010    43 _URRBR	=	0x0010
                     0010    44 _URTHR	=	0x0010
                     0011    45 _URIER	=	0x0011
                     0012    46 _URIIR	=	0x0012
                     0013    47 _URLCR	=	0x0013
                     0015    48 _URLSR	=	0x0015
                     0014    49 _URMCR	=	0x0014
                     0016    50 _URMSR	=	0x0016
                     0010    51 _URDLL	=	0x0010
                     0011    52 _URDLM	=	0x0011
                             53 ;--------------------------------------------------------
                             54 ; ram data
                             55 ;--------------------------------------------------------
                             56 	.area _DATA
   0000                      57 ___ret_aux:
   0000                      58 	.ds 1
                             59 ;--------------------------------------------------------
                             60 ; ram data
                             61 ;--------------------------------------------------------
                             62 	.area _INITIALIZED
                             63 ;--------------------------------------------------------
                             64 ; absolute external ram data
                             65 ;--------------------------------------------------------
                             66 	.area _DABS (ABS)
                             67 ;--------------------------------------------------------
                             68 ; global & static initialisations
                             69 ;--------------------------------------------------------
                             70 	.area _HOME
                             71 	.area _GSINIT
                             72 	.area _GSFINAL
                             73 	.area _GSINIT
                             74 ;--------------------------------------------------------
                             75 ; Home
                             76 ;--------------------------------------------------------
                             77 	.area _HOME
                             78 	.area _HOME
                             79 ;--------------------------------------------------------
                             80 ; code
                             81 ;--------------------------------------------------------
                             82 	.area _CODE
                             83 ;/opt/SMZ80_SDK/V1/include/smz80.h:230: void io_write(char port_addr, char data) {
                             84 ;	---------------------------------
                             85 ; Function io_write
                             86 ; ---------------------------------
   0000                      87 _io_write::
                             88 ;/opt/SMZ80_SDK/V1/include/smz80.h:240: __endasm;
   0000 DD 21 02 00   [14]   89 	ld	ix, #2
   0004 DD 39         [15]   90 	add	ix,sp
   0006 DD 4E 00      [19]   91 	ld	c, (ix)
   0009 DD 23         [10]   92 	inc	ix
   000B DD 7E 00      [19]   93 	ld	a,(ix)
   000E ED 79         [12]   94 	out	(c), a
   0010 C9            [10]   95 	ret
                             96 ;/opt/SMZ80_SDK/V1/include/smz80.h:243: char io_read(char port_addr) {
                             97 ;	---------------------------------
                             98 ; Function io_read
                             99 ; ---------------------------------
   0011                     100 _io_read::
                            101 ;/opt/SMZ80_SDK/V1/include/smz80.h:251: __endasm;
   0011 DD 21 02 00   [14]  102 	LD	IX, #2
   0015 DD 39         [15]  103 	ADD	IX,SP
   0017 DD 4E 00      [19]  104 	LD	C, (IX)
   001A ED 78         [12]  105 	IN	A,(C)
   001C 32r00r00      [13]  106 	LD	(___ret_aux),A
                            107 ;/opt/SMZ80_SDK/V1/include/smz80.h:252: return __ret_aux;
   001F FD 21r00r00   [14]  108 	ld	iy,#___ret_aux
   0023 FD 6E 00      [19]  109 	ld	l,0 (iy)
   0026 C9            [10]  110 	ret
                            111 ;/opt/SMZ80_SDK/V1/include/smz80.h:254: void io_write_buffer(char port_addr, char* buffer_out, char count) {
                            112 ;	---------------------------------
                            113 ; Function io_write_buffer
                            114 ; ---------------------------------
   0027                     115 _io_write_buffer::
                            116 ;/opt/SMZ80_SDK/V1/include/smz80.h:269: __endasm;
   0027 DD 21 02 00   [14]  117 	LD	IX, #2
   002B DD 39         [15]  118 	ADD	IX,SP
   002D DD 4E 00      [19]  119 	LD	C, (IX)
   0030 DD 23         [10]  120 	INC	IX
   0032 DD 6E 00      [19]  121 	LD	L,(IX)
   0035 DD 23         [10]  122 	INC	IX
   0037 DD 66 00      [19]  123 	LD	H,(IX)
   003A DD 23         [10]  124 	INC	IX
   003C DD 46 00      [19]  125 	LD	B,(IX)
   003F ED B3         [21]  126 	OTIR
   0041 C9            [10]  127 	ret
                            128 ;/opt/SMZ80_SDK/V1/include/smz80.h:271: void io_read_buffer(char port_addr, char* buffer_in, char count) {
                            129 ;	---------------------------------
                            130 ; Function io_read_buffer
                            131 ; ---------------------------------
   0042                     132 _io_read_buffer::
                            133 ;/opt/SMZ80_SDK/V1/include/smz80.h:286: __endasm;
   0042 DD 21 02 00   [14]  134 	LD	IX, #2
   0046 DD 39         [15]  135 	ADD	IX,SP
   0048 DD 4E 00      [19]  136 	LD	C, (IX)
   004B DD 23         [10]  137 	INC	IX
   004D DD 6E 00      [19]  138 	LD	L,(IX)
   0050 DD 23         [10]  139 	INC	IX
   0052 DD 66 00      [19]  140 	LD	H,(IX)
   0055 DD 23         [10]  141 	INC	IX
   0057 DD 46 00      [19]  142 	LD	B,(IX)
   005A ED B2         [21]  143 	INIR
   005C C9            [10]  144 	ret
                            145 ;/opt/SMZ80_SDK/V1/include/smz80.h:289: void uart_init(const uart_cfg_t *uart_config) {
                            146 ;	---------------------------------
                            147 ; Function uart_init
                            148 ; ---------------------------------
   005D                     149 _uart_init::
   005D DD E5         [15]  150 	push	ix
   005F DD 21 00 00   [14]  151 	ld	ix,#0
   0063 DD 39         [15]  152 	add	ix,sp
                            153 ;/opt/SMZ80_SDK/V1/include/smz80.h:290: uart_set_baudrate(uart_config->baudrate);
   0065 DD 4E 04      [19]  154 	ld	c,4 (ix)
   0068 DD 46 05      [19]  155 	ld	b,5 (ix)
   006B 0A            [ 7]  156 	ld	a,(bc)
   006C 57            [ 4]  157 	ld	d,a
   006D C5            [11]  158 	push	bc
   006E D5            [11]  159 	push	de
   006F 33            [ 6]  160 	inc	sp
   0070 CDr94r00      [17]  161 	call	_uart_set_baudrate
   0073 33            [ 6]  162 	inc	sp
   0074 C1            [10]  163 	pop	bc
                            164 ;/opt/SMZ80_SDK/V1/include/smz80.h:291: URIER = uart_config->interrupt;
   0075 69            [ 4]  165 	ld	l, c
   0076 60            [ 4]  166 	ld	h, b
   0077 11 04 00      [10]  167 	ld	de, #0x0004
   007A 19            [11]  168 	add	hl, de
   007B 7E            [ 7]  169 	ld	a,(hl)
   007C D3 11         [11]  170 	out	(_URIER),a
                            171 ;/opt/SMZ80_SDK/V1/include/smz80.h:292: URLCR = (uart_config->stop_bits) | (uart_config->parity) | (uart_config->word_length);
   007E 69            [ 4]  172 	ld	l, c
   007F 60            [ 4]  173 	ld	h, b
   0080 23            [ 6]  174 	inc	hl
   0081 5E            [ 7]  175 	ld	e,(hl)
   0082 69            [ 4]  176 	ld	l, c
   0083 60            [ 4]  177 	ld	h, b
   0084 23            [ 6]  178 	inc	hl
   0085 23            [ 6]  179 	inc	hl
   0086 7E            [ 7]  180 	ld	a,(hl)
   0087 B3            [ 4]  181 	or	a, e
   0088 69            [ 4]  182 	ld	l, c
   0089 60            [ 4]  183 	ld	h, b
   008A 23            [ 6]  184 	inc	hl
   008B 23            [ 6]  185 	inc	hl
   008C 23            [ 6]  186 	inc	hl
   008D 4E            [ 7]  187 	ld	c,(hl)
   008E B1            [ 4]  188 	or	a, c
   008F D3 13         [11]  189 	out	(_URLCR),a
   0091 DD E1         [14]  190 	pop	ix
   0093 C9            [10]  191 	ret
                            192 ;/opt/SMZ80_SDK/V1/include/smz80.h:294: void uart_set_baudrate(const uart_baudrate_t baudrate) {
                            193 ;	---------------------------------
                            194 ; Function uart_set_baudrate
                            195 ; ---------------------------------
   0094                     196 _uart_set_baudrate::
                            197 ;/opt/SMZ80_SDK/V1/include/smz80.h:295: URLCR |= BV(UDLAB);
   0094 DB 13         [11]  198 	in	a,(_URLCR)
   0096 CB FF         [ 8]  199 	set	7, a
   0098 D3 13         [11]  200 	out	(_URLCR),a
                            201 ;/opt/SMZ80_SDK/V1/include/smz80.h:296: URDLL = baudrate;
   009A 21 02 00      [10]  202 	ld	hl, #2+0
   009D 39            [11]  203 	add	hl, sp
   009E 7E            [ 7]  204 	ld	a, (hl)
   009F D3 10         [11]  205 	out	(_URDLL),a
                            206 ;/opt/SMZ80_SDK/V1/include/smz80.h:297: URDLM = ((uint16_t)baudrate)>>8;
   00A1 3E 00         [ 7]  207 	ld	a, #0x00
   00A3 D3 11         [11]  208 	out	(_URDLM),a
                            209 ;/opt/SMZ80_SDK/V1/include/smz80.h:298: URLCR &= ~BV(UDLAB);
   00A5 DB 13         [11]  210 	in	a,(_URLCR)
   00A7 E6 7F         [ 7]  211 	and	a, #0x7f
   00A9 D3 13         [11]  212 	out	(_URLCR),a
   00AB C9            [10]  213 	ret
                            214 ;/opt/SMZ80_SDK/V1/include/smz80.h:300: void uart_write(char c) {
                            215 ;	---------------------------------
                            216 ; Function uart_write
                            217 ; ---------------------------------
   00AC                     218 _uart_write::
                            219 ;/opt/SMZ80_SDK/V1/include/smz80.h:301: while( !(URLSR & BV(UTHRE)))
   00AC                     220 00101$:
   00AC DB 15         [11]  221 	in	a,(_URLSR)
   00AE E6 20         [ 7]  222 	and	a, #0x20
   00B0 20 03         [12]  223 	jr	NZ,00103$
                            224 ;/opt/SMZ80_SDK/V1/include/smz80.h:302: NOP();    
   00B2 00            [ 4]  225 	NOP
   00B3 18 F7         [12]  226 	jr	00101$
   00B5                     227 00103$:
                            228 ;/opt/SMZ80_SDK/V1/include/smz80.h:303: URTHR = c;
   00B5 21 02 00      [10]  229 	ld	hl, #2+0
   00B8 39            [11]  230 	add	hl, sp
   00B9 7E            [ 7]  231 	ld	a, (hl)
   00BA D3 10         [11]  232 	out	(_URTHR),a
   00BC C9            [10]  233 	ret
                            234 ;/opt/SMZ80_SDK/V1/include/smz80.h:305: char uart_read() {
                            235 ;	---------------------------------
                            236 ; Function uart_read
                            237 ; ---------------------------------
   00BD                     238 _uart_read::
                            239 ;/opt/SMZ80_SDK/V1/include/smz80.h:306: while(!(URLSR & BV(UDR))) 
   00BD                     240 00101$:
   00BD DB 15         [11]  241 	in	a,(_URLSR)
   00BF 0F            [ 4]  242 	rrca
   00C0 38 03         [12]  243 	jr	C,00103$
                            244 ;/opt/SMZ80_SDK/V1/include/smz80.h:307: NOP();
   00C2 00            [ 4]  245 	NOP
   00C3 18 F8         [12]  246 	jr	00101$
   00C5                     247 00103$:
                            248 ;/opt/SMZ80_SDK/V1/include/smz80.h:308: return URRBR;
   00C5 DB 10         [11]  249 	in	a,(_URRBR)
   00C7 6F            [ 4]  250 	ld	l,a
   00C8 C9            [10]  251 	ret
                            252 ;/opt/SMZ80_SDK/V1/include/smz80.h:310: void uart_print(const char* str) {
                            253 ;	---------------------------------
                            254 ; Function uart_print
                            255 ; ---------------------------------
   00C9                     256 _uart_print::
                            257 ;/opt/SMZ80_SDK/V1/include/smz80.h:311: while(*str)       
   00C9 D1            [10]  258 	pop	de
   00CA C1            [10]  259 	pop	bc
   00CB C5            [11]  260 	push	bc
   00CC D5            [11]  261 	push	de
   00CD                     262 00101$:
   00CD 0A            [ 7]  263 	ld	a,(bc)
   00CE B7            [ 4]  264 	or	a, a
   00CF C8            [11]  265 	ret	Z
                            266 ;/opt/SMZ80_SDK/V1/include/smz80.h:312: putchar(*str++); // envía el siguiente caracter. 
   00D0 5F            [ 4]  267 	ld	e,a
   00D1 03            [ 6]  268 	inc	bc
   00D2 16 00         [ 7]  269 	ld	d,#0x00
   00D4 C5            [11]  270 	push	bc
   00D5 D5            [11]  271 	push	de
   00D6 CDr29r02      [17]  272 	call	_putchar
   00D9 F1            [10]  273 	pop	af
   00DA C1            [10]  274 	pop	bc
   00DB 18 F0         [12]  275 	jr	00101$
                            276 ;/opt/SMZ80_SDK/V1/include/smz80.h:314: int uart_read_line(char* str) {
                            277 ;	---------------------------------
                            278 ; Function uart_read_line
                            279 ; ---------------------------------
   00DD                     280 _uart_read_line::
   00DD DD E5         [15]  281 	push	ix
   00DF DD 21 00 00   [14]  282 	ld	ix,#0
   00E3 DD 39         [15]  283 	add	ix,sp
   00E5 F5            [11]  284 	push	af
                            285 ;/opt/SMZ80_SDK/V1/include/smz80.h:315: int n=0;
   00E6 01 00 00      [10]  286 	ld	bc,#0x0000
                            287 ;/opt/SMZ80_SDK/V1/include/smz80.h:317: while(n<MAXLINE-1 && (c=getchar()) != '\n' && c !='\r') {
   00E9                     288 00111$:
   00E9 79            [ 4]  289 	ld	a,c
   00EA D6 FF         [ 7]  290 	sub	a, #0xff
   00EC 78            [ 4]  291 	ld	a,b
   00ED 17            [ 4]  292 	rla
   00EE 3F            [ 4]  293 	ccf
   00EF 1F            [ 4]  294 	rra
   00F0 DE 83         [ 7]  295 	sbc	a, #0x83
   00F2 D2r7Ar01      [10]  296 	jp	NC,00113$
   00F5 C5            [11]  297 	push	bc
   00F6 CDr54r02      [17]  298 	call	_getchar
   00F9 C1            [10]  299 	pop	bc
   00FA 7D            [ 4]  300 	ld	a,l
   00FB 5F            [ 4]  301 	ld	e,a
   00FC D6 0A         [ 7]  302 	sub	a, #0x0a
   00FE CAr7Ar01      [10]  303 	jp	Z,00113$
   0101 7B            [ 4]  304 	ld	a,e
   0102 D6 0D         [ 7]  305 	sub	a, #0x0d
   0104 28 74         [12]  306 	jr	Z,00113$
                            307 ;/opt/SMZ80_SDK/V1/include/smz80.h:321: putchar(c);
   0106 DD 73 FE      [19]  308 	ld	-2 (ix),e
   0109 DD 36 FF 00   [19]  309 	ld	-1 (ix),#0x00
                            310 ;/opt/SMZ80_SDK/V1/include/smz80.h:318: if(c == 0x7F || c==0x08) {
   010D 7B            [ 4]  311 	ld	a,e
   010E FE 7F         [ 7]  312 	cp	a,#0x7f
   0110 28 04         [12]  313 	jr	Z,00105$
   0112 D6 08         [ 7]  314 	sub	a, #0x08
   0114 20 32         [12]  315 	jr	NZ,00106$
   0116                     316 00105$:
                            317 ;/opt/SMZ80_SDK/V1/include/smz80.h:319: if(n>0){
   0116 AF            [ 4]  318 	xor	a, a
   0117 B9            [ 4]  319 	cp	a, c
   0118 98            [ 4]  320 	sbc	a, b
   0119 E2r1Er01      [10]  321 	jp	PO, 00149$
   011C EE 80         [ 7]  322 	xor	a, #0x80
   011E                     323 00149$:
   011E F2rE9r00      [10]  324 	jp	P,00111$
                            325 ;/opt/SMZ80_SDK/V1/include/smz80.h:320: str[--n]='\0';
   0121 0B            [ 6]  326 	dec	bc
   0122 DD 6E 04      [19]  327 	ld	l,4 (ix)
   0125 DD 66 05      [19]  328 	ld	h,5 (ix)
   0128 09            [11]  329 	add	hl,bc
   0129 36 00         [10]  330 	ld	(hl),#0x00
                            331 ;/opt/SMZ80_SDK/V1/include/smz80.h:321: putchar(c);
   012B C5            [11]  332 	push	bc
   012C D1            [10]  333 	pop	de
   012D E1            [10]  334 	pop	hl
   012E E5            [11]  335 	push	hl
   012F D5            [11]  336 	push	de
   0130 E5            [11]  337 	push	hl
   0131 CDr29r02      [17]  338 	call	_putchar
   0134 21 20 00      [10]  339 	ld	hl, #0x0020
   0137 E3            [19]  340 	ex	(sp),hl
   0138 CDr29r02      [17]  341 	call	_putchar
   013B F1            [10]  342 	pop	af
   013C D1            [10]  343 	pop	de
   013D E1            [10]  344 	pop	hl
   013E E5            [11]  345 	push	hl
   013F D5            [11]  346 	push	de
   0140 E5            [11]  347 	push	hl
   0141 CDr29r02      [17]  348 	call	_putchar
   0144 F1            [10]  349 	pop	af
   0145 C1            [10]  350 	pop	bc
   0146 18 A1         [12]  351 	jr	00111$
   0148                     352 00106$:
                            353 ;/opt/SMZ80_SDK/V1/include/smz80.h:327: if(isprint(c)) {
   0148 C5            [11]  354 	push	bc
   0149 D5            [11]  355 	push	de
   014A DD 6E FE      [19]  356 	ld	l,-2 (ix)
   014D DD 66 FF      [19]  357 	ld	h,-1 (ix)
   0150 E5            [11]  358 	push	hl
   0151 CDr00r00      [17]  359 	call	_isprint
   0154 F1            [10]  360 	pop	af
   0155 D1            [10]  361 	pop	de
   0156 C1            [10]  362 	pop	bc
   0157 7C            [ 4]  363 	ld	a,h
   0158 B5            [ 4]  364 	or	a,l
   0159 28 8E         [12]  365 	jr	Z,00111$
                            366 ;/opt/SMZ80_SDK/V1/include/smz80.h:328: str[n++]=c;
   015B C5            [11]  367 	push	bc
   015C FD E1         [14]  368 	pop	iy
   015E 03            [ 6]  369 	inc	bc
   015F C5            [11]  370 	push	bc
   0160 DD 4E 04      [19]  371 	ld	c,4 (ix)
   0163 DD 46 05      [19]  372 	ld	b,5 (ix)
   0166 FD 09         [15]  373 	add	iy, bc
   0168 C1            [10]  374 	pop	bc
   0169 FD 73 00      [19]  375 	ld	0 (iy), e
                            376 ;/opt/SMZ80_SDK/V1/include/smz80.h:329: putchar(c);
   016C C5            [11]  377 	push	bc
   016D D1            [10]  378 	pop	de
   016E E1            [10]  379 	pop	hl
   016F E5            [11]  380 	push	hl
   0170 D5            [11]  381 	push	de
   0171 E5            [11]  382 	push	hl
   0172 CDr29r02      [17]  383 	call	_putchar
   0175 F1            [10]  384 	pop	af
   0176 C1            [10]  385 	pop	bc
   0177 C3rE9r00      [10]  386 	jp	00111$
   017A                     387 00113$:
                            388 ;/opt/SMZ80_SDK/V1/include/smz80.h:332: str[n]='\0';     
   017A DD 6E 04      [19]  389 	ld	l,4 (ix)
   017D DD 66 05      [19]  390 	ld	h,5 (ix)
   0180 09            [11]  391 	add	hl,bc
   0181 36 00         [10]  392 	ld	(hl),#0x00
                            393 ;/opt/SMZ80_SDK/V1/include/smz80.h:333: putchar('\n');
   0183 C5            [11]  394 	push	bc
   0184 21 0A 00      [10]  395 	ld	hl,#0x000a
   0187 E5            [11]  396 	push	hl
   0188 CDr29r02      [17]  397 	call	_putchar
   018B F1            [10]  398 	pop	af
                            399 ;/opt/SMZ80_SDK/V1/include/smz80.h:334: return n;
   018C E1            [10]  400 	pop	hl
   018D DD F9         [10]  401 	ld	sp, ix
   018F DD E1         [14]  402 	pop	ix
   0191 C9            [10]  403 	ret
                            404 ;/opt/SMZ80_SDK/V1/include/smz80.h:336: void uart_disable_interrupts() {
                            405 ;	---------------------------------
                            406 ; Function uart_disable_interrupts
                            407 ; ---------------------------------
   0192                     408 _uart_disable_interrupts::
                            409 ;/opt/SMZ80_SDK/V1/include/smz80.h:337: URIER = 0;
   0192 3E 00         [ 7]  410 	ld	a,#0x00
   0194 D3 11         [11]  411 	out	(_URIER),a
   0196 C9            [10]  412 	ret
                            413 ;/opt/SMZ80_SDK/V1/include/smz80.h:339: void uart_enable_interrupts(uart_interrupt_t int_cfg) {
                            414 ;	---------------------------------
                            415 ; Function uart_enable_interrupts
                            416 ; ---------------------------------
   0197                     417 _uart_enable_interrupts::
                            418 ;/opt/SMZ80_SDK/V1/include/smz80.h:340: URIER = int_cfg;
   0197 21 02 00      [10]  419 	ld	hl, #2+0
   019A 39            [11]  420 	add	hl, sp
   019B 7E            [ 7]  421 	ld	a, (hl)
   019C D3 11         [11]  422 	out	(_URIER),a
   019E C9            [10]  423 	ret
                            424 ;/opt/SMZ80_SDK/V1/include/smz80.h:344: void ppi_init(const ppi_cfg_t *ppi_config) {
                            425 ;	---------------------------------
                            426 ; Function ppi_init
                            427 ; ---------------------------------
   019F                     428 _ppi_init::
   019F DD E5         [15]  429 	push	ix
   01A1 DD 21 00 00   [14]  430 	ld	ix,#0
   01A5 DD 39         [15]  431 	add	ix,sp
                            432 ;/opt/SMZ80_SDK/V1/include/smz80.h:345: PPI_CTRL = 0x80 | ppi_config->mode | (ppi_config->pcl_dir << PCPCL) | (ppi_config->pch_dir << PCPCH) | (ppi_config->pa_dir << PCPA) | (ppi_config->pb_dir << PCPB);
   01A7 DD 5E 04      [19]  433 	ld	e,4 (ix)
   01AA DD 56 05      [19]  434 	ld	d,5 (ix)
   01AD 1A            [ 7]  435 	ld	a,(de)
   01AE CB FF         [ 8]  436 	set	7, a
   01B0 4F            [ 4]  437 	ld	c,a
   01B1 6B            [ 4]  438 	ld	l, e
   01B2 62            [ 4]  439 	ld	h, d
   01B3 23            [ 6]  440 	inc	hl
   01B4 23            [ 6]  441 	inc	hl
   01B5 23            [ 6]  442 	inc	hl
   01B6 7E            [ 7]  443 	ld	a,(hl)
   01B7 B1            [ 4]  444 	or	a, c
   01B8 4F            [ 4]  445 	ld	c,a
   01B9 D5            [11]  446 	push	de
   01BA FD E1         [14]  447 	pop	iy
   01BC FD 7E 04      [19]  448 	ld	a,4 (iy)
   01BF 07            [ 4]  449 	rlca
   01C0 07            [ 4]  450 	rlca
   01C1 07            [ 4]  451 	rlca
   01C2 E6 F8         [ 7]  452 	and	a,#0xf8
   01C4 B1            [ 4]  453 	or	a, c
   01C5 4F            [ 4]  454 	ld	c,a
   01C6 6B            [ 4]  455 	ld	l, e
   01C7 62            [ 4]  456 	ld	h, d
   01C8 23            [ 6]  457 	inc	hl
   01C9 7E            [ 7]  458 	ld	a,(hl)
   01CA 07            [ 4]  459 	rlca
   01CB 07            [ 4]  460 	rlca
   01CC 07            [ 4]  461 	rlca
   01CD 07            [ 4]  462 	rlca
   01CE E6 F0         [ 7]  463 	and	a,#0xf0
   01D0 B1            [ 4]  464 	or	a, c
   01D1 4F            [ 4]  465 	ld	c,a
   01D2 EB            [ 4]  466 	ex	de,hl
   01D3 23            [ 6]  467 	inc	hl
   01D4 23            [ 6]  468 	inc	hl
   01D5 7E            [ 7]  469 	ld	a,(hl)
   01D6 87            [ 4]  470 	add	a, a
   01D7 B1            [ 4]  471 	or	a, c
   01D8 D3 03         [11]  472 	out	(_PPI_CTRL),a
   01DA DD E1         [14]  473 	pop	ix
   01DC C9            [10]  474 	ret
                            475 ;/opt/SMZ80_SDK/V1/include/smz80.h:347: void ppi_set_portc_bit(const char bit) {
                            476 ;	---------------------------------
                            477 ; Function ppi_set_portc_bit
                            478 ; ---------------------------------
   01DD                     479 _ppi_set_portc_bit::
                            480 ;/opt/SMZ80_SDK/V1/include/smz80.h:348: PPI_CTRL = 1 | bit << 1;
   01DD 21 02 00      [10]  481 	ld	hl, #2+0
   01E0 39            [11]  482 	add	hl, sp
   01E1 7E            [ 7]  483 	ld	a, (hl)
   01E2 87            [ 4]  484 	add	a, a
   01E3 CB C7         [ 8]  485 	set	0, a
   01E5 D3 03         [11]  486 	out	(_PPI_CTRL),a
   01E7 C9            [10]  487 	ret
                            488 ;/opt/SMZ80_SDK/V1/include/smz80.h:350: void ppi_clear_portc_bit(const char bit) {
                            489 ;	---------------------------------
                            490 ; Function ppi_clear_portc_bit
                            491 ; ---------------------------------
   01E8                     492 _ppi_clear_portc_bit::
                            493 ;/opt/SMZ80_SDK/V1/include/smz80.h:351: PPI_CTRL = bit << 1;
   01E8 21 02 00      [10]  494 	ld	hl, #2+0
   01EB 39            [11]  495 	add	hl, sp
   01EC 7E            [ 7]  496 	ld	a, (hl)
   01ED 87            [ 4]  497 	add	a, a
   01EE D3 03         [11]  498 	out	(_PPI_CTRL),a
   01F0 C9            [10]  499 	ret
                            500 ;/opt/SMZ80_SDK/V1/include/smz80.h:354: void delay_10us(){
                            501 ;	---------------------------------
                            502 ; Function delay_10us
                            503 ; ---------------------------------
   01F1                     504 _delay_10us::
                            505 ;/opt/SMZ80_SDK/V1/include/smz80.h:363: __endasm;
   01F1 D9            [ 4]  506 	EXX
   01F2 08            [ 4]  507 	EX	AF,AF'
   01F3 06 02         [ 7]  508 	LD	B,#0x2
   01F5                     509 	    LOOP_10:
   01F5 10 FE         [13]  510 	DJNZ	LOOP_10
   01F7 08            [ 4]  511 	EX	AF,AF'
   01F8 D9            [ 4]  512 	EXX
   01F9 C9            [10]  513 	ret
                            514 ;/opt/SMZ80_SDK/V1/include/smz80.h:365: void delay_100us(){
                            515 ;	---------------------------------
                            516 ; Function delay_100us
                            517 ; ---------------------------------
   01FA                     518 _delay_100us::
                            519 ;/opt/SMZ80_SDK/V1/include/smz80.h:374: __endasm;
   01FA D9            [ 4]  520 	EXX
   01FB 08            [ 4]  521 	EX	AF,AF'
   01FC 06 3A         [ 7]  522 	LD	B,#0x3A
   01FE                     523 	    LOOP_100:
   01FE 10 FE         [13]  524 	DJNZ	LOOP_100
   0200 08            [ 4]  525 	EX	AF,AF'
   0201 D9            [ 4]  526 	EXX
   0202 C9            [10]  527 	ret
                            528 ;/opt/SMZ80_SDK/V1/include/smz80.h:376: void delay_ms(int ms) {
                            529 ;	---------------------------------
                            530 ; Function delay_ms
                            531 ; ---------------------------------
   0203                     532 _delay_ms::
   0203 DD E5         [15]  533 	push	ix
   0205 DD 21 00 00   [14]  534 	ld	ix,#0
   0209 DD 39         [15]  535 	add	ix,sp
                            536 ;/opt/SMZ80_SDK/V1/include/smz80.h:379: while(ms--)
   020B DD 4E 04      [19]  537 	ld	c,4 (ix)
   020E DD 46 05      [19]  538 	ld	b,5 (ix)
   0211                     539 00102$:
   0211 59            [ 4]  540 	ld	e, c
   0212 50            [ 4]  541 	ld	d, b
   0213 0B            [ 6]  542 	dec	bc
   0214 7A            [ 4]  543 	ld	a,d
   0215 B3            [ 4]  544 	or	a,e
   0216 28 0E         [12]  545 	jr	Z,00108$
                            546 ;/opt/SMZ80_SDK/V1/include/smz80.h:380: for(i=0;i<0x106;i++)
   0218 11 06 01      [10]  547 	ld	de,#0x0106
   021B                     548 00107$:
                            549 ;/opt/SMZ80_SDK/V1/include/smz80.h:381: __asm__("nop");
   021B 00            [ 4]  550 	nop
   021C EB            [ 4]  551 	ex	de,hl
   021D 2B            [ 6]  552 	dec	hl
   021E 5D            [ 4]  553 	ld	e, l
                            554 ;/opt/SMZ80_SDK/V1/include/smz80.h:380: for(i=0;i<0x106;i++)
   021F 7C            [ 4]  555 	ld	a,h
   0220 57            [ 4]  556 	ld	d,a
   0221 B5            [ 4]  557 	or	a,l
   0222 20 F7         [12]  558 	jr	NZ,00107$
   0224 18 EB         [12]  559 	jr	00102$
   0226                     560 00108$:
   0226 DD E1         [14]  561 	pop	ix
   0228 C9            [10]  562 	ret
                            563 ;/opt/SMZ80_SDK/V1/include/smz80.h:383: int putchar(int c) {
                            564 ;	---------------------------------
                            565 ; Function putchar
                            566 ; ---------------------------------
   0229                     567 _putchar::
                            568 ;/opt/SMZ80_SDK/V1/include/smz80.h:385: if(c=='\n')
   0229 FD 21 02 00   [14]  569 	ld	iy,#2
   022D FD 39         [15]  570 	add	iy,sp
   022F FD 7E 00      [19]  571 	ld	a,0 (iy)
   0232 D6 0A         [ 7]  572 	sub	a, #0x0a
   0234 20 0E         [12]  573 	jr	NZ,00102$
   0236 FD 7E 01      [19]  574 	ld	a,1 (iy)
   0239 B7            [ 4]  575 	or	a, a
   023A 20 08         [12]  576 	jr	NZ,00102$
                            577 ;/opt/SMZ80_SDK/V1/include/smz80.h:386: uart_write('\r');
   023C 3E 0D         [ 7]  578 	ld	a,#0x0d
   023E F5            [11]  579 	push	af
   023F 33            [ 6]  580 	inc	sp
   0240 CDrACr00      [17]  581 	call	_uart_write
   0243 33            [ 6]  582 	inc	sp
   0244                     583 00102$:
                            584 ;/opt/SMZ80_SDK/V1/include/smz80.h:387: uart_write(c);
   0244 21 02 00      [10]  585 	ld	hl, #2+0
   0247 39            [11]  586 	add	hl, sp
   0248 46            [ 7]  587 	ld	b, (hl)
   0249 C5            [11]  588 	push	bc
   024A 33            [ 6]  589 	inc	sp
   024B CDrACr00      [17]  590 	call	_uart_write
   024E 33            [ 6]  591 	inc	sp
                            592 ;/opt/SMZ80_SDK/V1/include/smz80.h:389: return c;
   024F C1            [10]  593 	pop	bc
   0250 E1            [10]  594 	pop	hl
   0251 E5            [11]  595 	push	hl
   0252 C5            [11]  596 	push	bc
   0253 C9            [10]  597 	ret
                            598 ;/opt/SMZ80_SDK/V1/include/smz80.h:391: char getchar() {
                            599 ;	---------------------------------
                            600 ; Function getchar
                            601 ; ---------------------------------
   0254                     602 _getchar::
                            603 ;/opt/SMZ80_SDK/V1/include/smz80.h:394: return uart_read();
   0254 C3rBDr00      [10]  604 	jp  _uart_read
                            605 ;main.c:30: ISR_NMI(){
                            606 ;	---------------------------------
                            607 ; Function isr_vector66
                            608 ; ---------------------------------
   0257                     609 _isr_vector66::
   0257 F5            [11]  610 	push	af
   0258 C5            [11]  611 	push	bc
   0259 D5            [11]  612 	push	de
   025A E5            [11]  613 	push	hl
   025B FD E5         [15]  614 	push	iy
                            615 ;main.c:33: }
   025D FD E1         [14]  616 	pop	iy
   025F E1            [10]  617 	pop	hl
   0260 D1            [10]  618 	pop	de
   0261 C1            [10]  619 	pop	bc
   0262 F1            [10]  620 	pop	af
   0263 ED 45         [14]  621 	retn
                            622 ;main.c:35: ISR_INT_38(){
                            623 ;	---------------------------------
                            624 ; Function isr_vector38
                            625 ; ---------------------------------
   0265                     626 _isr_vector38::
   0265 FB            [ 4]  627 	ei
   0266 F5            [11]  628 	push	af
   0267 C5            [11]  629 	push	bc
   0268 D5            [11]  630 	push	de
   0269 E5            [11]  631 	push	hl
   026A FD E5         [15]  632 	push	iy
                            633 ;main.c:38: }
   026C FD E1         [14]  634 	pop	iy
   026E E1            [10]  635 	pop	hl
   026F D1            [10]  636 	pop	de
   0270 C1            [10]  637 	pop	bc
   0271 F1            [10]  638 	pop	af
   0272 ED 4D         [14]  639 	reti
                            640 ;main.c:41: void system_init(){
                            641 ;	---------------------------------
                            642 ; Function system_init
                            643 ; ---------------------------------
   0274                     644 _system_init::
                            645 ;main.c:44: }
   0274 C9            [10]  646 	ret
                            647 ;main.c:46: int main(){
                            648 ;	---------------------------------
                            649 ; Function main
                            650 ; ---------------------------------
   0275                     651 _main::
                            652 ;main.c:49: system_init(); 
   0275 CDr74r02      [17]  653 	call	_system_init
                            654 ;main.c:50: PPI_CTRL= 0x80;
   0278 3E 80         [ 7]  655 	ld	a,#0x80
   027A D3 03         [11]  656 	out	(_PPI_CTRL),a
                            657 ;main.c:52: while(TRUE){
   027C                     658 00102$:
                            659 ;main.c:53: PPI_PORTA = 0xff;
   027C 3E FF         [ 7]  660 	ld	a,#0xff
   027E D3 00         [11]  661 	out	(_PPI_PORTA),a
                            662 ;main.c:54: delay_ms(2000);
   0280 21 D0 07      [10]  663 	ld	hl,#0x07d0
   0283 E5            [11]  664 	push	hl
   0284 CDr03r02      [17]  665 	call	_delay_ms
   0287 F1            [10]  666 	pop	af
                            667 ;main.c:56: PPI_PORTA = 0x00;
   0288 3E 00         [ 7]  668 	ld	a,#0x00
   028A D3 00         [11]  669 	out	(_PPI_PORTA),a
                            670 ;main.c:57: delay_ms(2000);
   028C 21 D0 07      [10]  671 	ld	hl,#0x07d0
   028F E5            [11]  672 	push	hl
   0290 CDr03r02      [17]  673 	call	_delay_ms
   0293 F1            [10]  674 	pop	af
   0294 18 E6         [12]  675 	jr	00102$
                            676 	.area _CODE
                            677 	.area _INITIALIZER
                            678 	.area _CABS (ABS)
